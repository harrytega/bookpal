// Code generated by go-swagger; DO NOT EDIT.

package lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetAllBooksFromListParams creates a new GetAllBooksFromListParams object
// with the default values initialized.
func NewGetAllBooksFromListParams() GetAllBooksFromListParams {

	var (
		// initialize parameters with default values

		pageDefault     = int64(1)
		pageSizeDefault = int64(10)
	)

	return GetAllBooksFromListParams{
		Page: &pageDefault,

		PageSize: &pageSizeDefault,
	}
}

// GetAllBooksFromListParams contains all the bound params for the get all books from list operation
// typically these are obtained from a http.Request
//
// swagger:parameters getAllBooksFromList
type GetAllBooksFromListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*List ID from the list we want the books for.
	  Required: true
	  In: path
	*/
	ListID strfmt.UUID `param:"list_id"`
	/*Page number
	  In: query
	  Default: 1
	*/
	Page *int64 `query:"page"`
	/*amount of books per page
	  Maximum: 30
	  In: query
	  Default: 10
	*/
	PageSize *int64 `query:"pageSize"`
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetAllBooksFromListParams() beforehand.
func (o *GetAllBooksFromListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rListID, rhkListID, _ := route.Params.GetOK("list_id")
	if err := o.bindListID(rListID, rhkListID, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("pageSize")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllBooksFromListParams) Validate(formats strfmt.Registry) error {
	var res []error

	// list_id
	// Required: true
	// Parameter is provided by construction from the route

	if err := o.validateListID(formats); err != nil {
		res = append(res, err)
	}

	// page
	// Required: false
	// AllowEmptyValue: false

	// pageSize
	// Required: false
	// AllowEmptyValue: false

	if err := o.validatePageSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindListID binds and validates parameter ListID from path.
func (o *GetAllBooksFromListParams) bindListID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("list_id", "path", "strfmt.UUID", raw)
	}
	o.ListID = *(value.(*strfmt.UUID))

	if err := o.validateListID(formats); err != nil {
		return err
	}

	return nil
}

// validateListID carries on validations for parameter ListID
func (o *GetAllBooksFromListParams) validateListID(formats strfmt.Registry) error {

	if err := validate.FormatOf("list_id", "path", "uuid", o.ListID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *GetAllBooksFromListParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetAllBooksFromListParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = &value

	return nil
}

// bindPageSize binds and validates parameter PageSize from query.
func (o *GetAllBooksFromListParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetAllBooksFromListParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("pageSize", "query", "int64", raw)
	}
	o.PageSize = &value

	if err := o.validatePageSize(formats); err != nil {
		return err
	}

	return nil
}

// validatePageSize carries on validations for parameter PageSize
func (o *GetAllBooksFromListParams) validatePageSize(formats strfmt.Registry) error {

	// Required: false
	if o.PageSize == nil {
		return nil
	}

	if err := validate.MaximumInt("pageSize", "query", *o.PageSize, 30, false); err != nil {
		return err
	}

	return nil
}
