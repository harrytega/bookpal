// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListBooksItems list books items
//
// swagger:model listBooksItems
type ListBooksItems struct {

	// author
	// Example: J. K. Rowling
	// Required: true
	Author *string `json:"author"`

	// book description
	// Example: Dark times have come to Hogwarts. After the Dementors' attack on his cousin Dudley, Harry Potter knows that Voldemort will stop at nothing to find him. ...
	BookDescription string `json:"book_description,omitempty"`

	// book id
	// Example: d6764ee3-bf09-40c3-97c5-8f78b7de7ec3
	// Format: uuid4
	BookID strfmt.UUID4 `json:"book_id,omitempty"`

	// genre
	// Example: Novel, Fantasy Fiction, Young adult literature
	Genre string `json:"genre,omitempty"`

	// pages
	// Example: 409
	Pages int32 `json:"pages,omitempty"`

	// publisher
	// Example: Bloomsbury
	Publisher string `json:"publisher,omitempty"`

	// Ratings are from 1 to 5.
	// Example: 3
	Rating int32 `json:"rating,omitempty"`

	// title
	// Example: Harry Potter
	// Required: true
	Title *string `json:"title"`

	// user notes
	// Example: Amazing Character Development from the main character.
	UserNotes string `json:"user_notes,omitempty"`
}

// Validate validates this list books items
func (m *ListBooksItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBookID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListBooksItems) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("author", "body", m.Author); err != nil {
		return err
	}

	return nil
}

func (m *ListBooksItems) validateBookID(formats strfmt.Registry) error {
	if swag.IsZero(m.BookID) { // not required
		return nil
	}

	if err := validate.FormatOf("book_id", "body", "uuid4", m.BookID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListBooksItems) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list books items based on context it is used
func (m *ListBooksItems) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ListBooksItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListBooksItems) UnmarshalBinary(b []byte) error {
	var res ListBooksItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
