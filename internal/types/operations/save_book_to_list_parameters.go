// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"test-project/internal/types"
)

// NewSaveBookToListParams creates a new SaveBookToListParams object
// no default values defined in spec.
func NewSaveBookToListParams() SaveBookToListParams {

	return SaveBookToListParams{}
}

// SaveBookToListParams contains all the bound params for the save book to list operation
// typically these are obtained from a http.Request
//
// swagger:parameters saveBookToList
type SaveBookToListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Book to add to the list.
	  Required: true
	  In: body
	*/
	BookToAddToList *types.ListBooksItems
	/*List ID to to get the list to add books to.
	  Required: true
	  In: path
	*/
	ListID strfmt.UUID `param:"list_id"`
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSaveBookToListParams() beforehand.
func (o *SaveBookToListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body types.ListBooksItems
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("bookToAddToList", "body", ""))
			} else {
				res = append(res, errors.NewParseError("bookToAddToList", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.BookToAddToList = &body
			}
		}
	} else {
		res = append(res, errors.Required("bookToAddToList", "body", ""))
	}
	rListID, rhkListID, _ := route.Params.GetOK("list_id")
	if err := o.bindListID(rListID, rhkListID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SaveBookToListParams) Validate(formats strfmt.Registry) error {
	var res []error

	// bookToAddToList
	// Required: true

	// body is validated in endpoint
	//if err := o.BookToAddToList.Validate(formats); err != nil {
	//  res = append(res, err)
	//}

	// list_id
	// Required: true
	// Parameter is provided by construction from the route

	if err := o.validateListID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindListID binds and validates parameter ListID from path.
func (o *SaveBookToListParams) bindListID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("list_id", "path", "strfmt.UUID", raw)
	}
	o.ListID = *(value.(*strfmt.UUID))

	if err := o.validateListID(formats); err != nil {
		return err
	}

	return nil
}

// validateListID carries on validations for parameter ListID
func (o *SaveBookToListParams) validateListID(formats strfmt.Registry) error {

	if err := validate.FormatOf("list_id", "path", "uuid", o.ListID.String(), formats); err != nil {
		return err
	}
	return nil
}
