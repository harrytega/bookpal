// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// List is an object representing the database table.
type List struct {
	ListID string `boil:"list_id" json:"list_id" toml:"list_id" yaml:"list_id"`
	Name   string `boil:"name" json:"name" toml:"name" yaml:"name"`
	UserID string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *listR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L listL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ListColumns = struct {
	ListID string
	Name   string
	UserID string
}{
	ListID: "list_id",
	Name:   "name",
	UserID: "user_id",
}

var ListTableColumns = struct {
	ListID string
	Name   string
	UserID string
}{
	ListID: "lists.list_id",
	Name:   "lists.name",
	UserID: "lists.user_id",
}

// Generated where

var ListWhere = struct {
	ListID whereHelperstring
	Name   whereHelperstring
	UserID whereHelperstring
}{
	ListID: whereHelperstring{field: "\"lists\".\"list_id\""},
	Name:   whereHelperstring{field: "\"lists\".\"name\""},
	UserID: whereHelperstring{field: "\"lists\".\"user_id\""},
}

// ListRels is where relationship names are stored.
var ListRels = struct {
	User  string
	Books string
}{
	User:  "User",
	Books: "Books",
}

// listR is where relationships are stored.
type listR struct {
	User  *User     `boil:"User" json:"User" toml:"User" yaml:"User"`
	Books BookSlice `boil:"Books" json:"Books" toml:"Books" yaml:"Books"`
}

// NewStruct creates a new relationship struct
func (*listR) NewStruct() *listR {
	return &listR{}
}

func (r *listR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *listR) GetBooks() BookSlice {
	if r == nil {
		return nil
	}
	return r.Books
}

// listL is where Load methods for each relationship are stored.
type listL struct{}

var (
	listAllColumns            = []string{"list_id", "name", "user_id"}
	listColumnsWithoutDefault = []string{"name", "user_id"}
	listColumnsWithDefault    = []string{"list_id"}
	listPrimaryKeyColumns     = []string{"list_id"}
	listGeneratedColumns      = []string{}
)

type (
	// ListSlice is an alias for a slice of pointers to List.
	// This should almost always be used instead of []List.
	ListSlice []*List

	listQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	listType                 = reflect.TypeOf(&List{})
	listMapping              = queries.MakeStructMapping(listType)
	listPrimaryKeyMapping, _ = queries.BindMapping(listType, listMapping, listPrimaryKeyColumns)
	listInsertCacheMut       sync.RWMutex
	listInsertCache          = make(map[string]insertCache)
	listUpdateCacheMut       sync.RWMutex
	listUpdateCache          = make(map[string]updateCache)
	listUpsertCacheMut       sync.RWMutex
	listUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single list record from the query.
func (q listQuery) One(ctx context.Context, exec boil.ContextExecutor) (*List, error) {
	o := &List{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for lists")
	}

	return o, nil
}

// All returns all List records from the query.
func (q listQuery) All(ctx context.Context, exec boil.ContextExecutor) (ListSlice, error) {
	var o []*List

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to List slice")
	}

	return o, nil
}

// Count returns the count of all List records in the query.
func (q listQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count lists rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q listQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if lists exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *List) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Books retrieves all the book's Books with an executor.
func (o *List) Books(mods ...qm.QueryMod) bookQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"book_list\" on \"books\".\"book_id\" = \"book_list\".\"book_id\""),
		qm.Where("\"book_list\".\"list_id\"=?", o.ListID),
	)

	return Books(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (listL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeList interface{}, mods queries.Applicator) error {
	var slice []*List
	var object *List

	if singular {
		var ok bool
		object, ok = maybeList.(*List)
		if !ok {
			object = new(List)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeList))
			}
		}
	} else {
		s, ok := maybeList.(*[]*List)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeList))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &listR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &listR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Lists = append(foreign.R.Lists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Lists = append(foreign.R.Lists, local)
				break
			}
		}
	}

	return nil
}

// LoadBooks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (listL) LoadBooks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeList interface{}, mods queries.Applicator) error {
	var slice []*List
	var object *List

	if singular {
		var ok bool
		object, ok = maybeList.(*List)
		if !ok {
			object = new(List)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeList))
			}
		}
	} else {
		s, ok := maybeList.(*[]*List)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeList))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &listR{}
		}
		args[object.ListID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &listR{}
			}
			args[obj.ListID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"books\".\"book_id\", \"books\".\"title\", \"books\".\"author\", \"books\".\"publisher\", \"books\".\"book_description\", \"books\".\"genre\", \"books\".\"pages\", \"books\".\"rating\", \"books\".\"image_link\", \"books\".\"user_notes\", \"books\".\"user_id\", \"a\".\"list_id\""),
		qm.From("\"books\""),
		qm.InnerJoin("\"book_list\" as \"a\" on \"books\".\"book_id\" = \"a\".\"book_id\""),
		qm.WhereIn("\"a\".\"list_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load books")
	}

	var resultSlice []*Book

	var localJoinCols []string
	for results.Next() {
		one := new(Book)
		var localJoinCol string

		err = results.Scan(&one.BookID, &one.Title, &one.Author, &one.Publisher, &one.BookDescription, &one.Genre, &one.Pages, &one.Rating, &one.ImageLink, &one.UserNotes, &one.UserID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for books")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice books")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on books")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for books")
	}

	if singular {
		object.R.Books = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookR{}
			}
			foreign.R.Lists = append(foreign.R.Lists, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ListID == localJoinCol {
				local.R.Books = append(local.R.Books, foreign)
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.Lists = append(foreign.R.Lists, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the list to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Lists.
func (o *List) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"lists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, listPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ListID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &listR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Lists: ListSlice{o},
		}
	} else {
		related.R.Lists = append(related.R.Lists, o)
	}

	return nil
}

// AddBooks adds the given related objects to the existing relationships
// of the list, optionally inserting them as new records.
// Appends related to o.R.Books.
// Sets related.R.Lists appropriately.
func (o *List) AddBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"book_list\" (\"list_id\", \"book_id\") values ($1, $2)"
		values := []interface{}{o.ListID, rel.BookID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &listR{
			Books: related,
		}
	} else {
		o.R.Books = append(o.R.Books, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookR{
				Lists: ListSlice{o},
			}
		} else {
			rel.R.Lists = append(rel.R.Lists, o)
		}
	}
	return nil
}

// SetBooks removes all previously related items of the
// list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Lists's Books accordingly.
// Replaces o.R.Books with related.
// Sets related.R.Lists's Books accordingly.
func (o *List) SetBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	query := "delete from \"book_list\" where \"list_id\" = $1"
	values := []interface{}{o.ListID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeBooksFromListsSlice(o, related)
	if o.R != nil {
		o.R.Books = nil
	}

	return o.AddBooks(ctx, exec, insert, related...)
}

// RemoveBooks relationships from objects passed in.
// Removes related items from R.Books (uses pointer comparison, removal does not keep order)
// Sets related.R.Lists.
func (o *List) RemoveBooks(ctx context.Context, exec boil.ContextExecutor, related ...*Book) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"book_list\" where \"list_id\" = $1 and \"book_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ListID}
	for _, rel := range related {
		values = append(values, rel.BookID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeBooksFromListsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Books {
			if rel != ri {
				continue
			}

			ln := len(o.R.Books)
			if ln > 1 && i < ln-1 {
				o.R.Books[i] = o.R.Books[ln-1]
			}
			o.R.Books = o.R.Books[:ln-1]
			break
		}
	}

	return nil
}

func removeBooksFromListsSlice(o *List, related []*Book) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Lists {
			if o.ListID != ri.ListID {
				continue
			}

			ln := len(rel.R.Lists)
			if ln > 1 && i < ln-1 {
				rel.R.Lists[i] = rel.R.Lists[ln-1]
			}
			rel.R.Lists = rel.R.Lists[:ln-1]
			break
		}
	}
}

// Lists retrieves all the records using an executor.
func Lists(mods ...qm.QueryMod) listQuery {
	mods = append(mods, qm.From("\"lists\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"lists\".*"})
	}

	return listQuery{q}
}

// FindList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindList(ctx context.Context, exec boil.ContextExecutor, listID string, selectCols ...string) (*List, error) {
	listObj := &List{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lists\" where \"list_id\"=$1", sel,
	)

	q := queries.Raw(query, listID)

	err := q.Bind(ctx, exec, listObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from lists")
	}

	return listObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *List) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no lists provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(listColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	listInsertCacheMut.RLock()
	cache, cached := listInsertCache[key]
	listInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			listAllColumns,
			listColumnsWithDefault,
			listColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(listType, listMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(listType, listMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lists\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lists\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into lists")
	}

	if !cached {
		listInsertCacheMut.Lock()
		listInsertCache[key] = cache
		listInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the List.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *List) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	listUpdateCacheMut.RLock()
	cache, cached := listUpdateCache[key]
	listUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			listAllColumns,
			listPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update lists, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lists\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, listPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(listType, listMapping, append(wl, listPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update lists row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for lists")
	}

	if !cached {
		listUpdateCacheMut.Lock()
		listUpdateCache[key] = cache
		listUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q listQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for lists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for lists")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ListSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, listPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in list slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all list")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *List) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no lists provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(listColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	listUpsertCacheMut.RLock()
	cache, cached := listUpsertCache[key]
	listUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			listAllColumns,
			listColumnsWithDefault,
			listColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			listAllColumns,
			listPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert lists, could not build update column list")
		}

		ret := strmangle.SetComplement(listAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(listPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert lists, could not build conflict column list")
			}

			conflict = make([]string, len(listPrimaryKeyColumns))
			copy(conflict, listPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lists\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(listType, listMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(listType, listMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert lists")
	}

	if !cached {
		listUpsertCacheMut.Lock()
		listUpsertCache[key] = cache
		listUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single List record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *List) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no List provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), listPrimaryKeyMapping)
	sql := "DELETE FROM \"lists\" WHERE \"list_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from lists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for lists")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q listQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no listQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lists")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ListSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"lists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, listPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from list slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lists")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *List) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindList(ctx, exec, o.ListID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ListSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lists\".* FROM \"lists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, listPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ListSlice")
	}

	*o = slice

	return nil
}

// ListExists checks if the List row exists.
func ListExists(ctx context.Context, exec boil.ContextExecutor, listID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lists\" where \"list_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, listID)
	}
	row := exec.QueryRowContext(ctx, sql, listID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if lists exists")
	}

	return exists, nil
}

// Exists checks if the List row exists.
func (o *List) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ListExists(ctx, exec, o.ListID)
}
