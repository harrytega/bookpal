// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLists(t *testing.T) {
	t.Parallel()

	query := Lists()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testListsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testListsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Lists().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testListsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ListSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testListsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ListExists(ctx, tx, o.ListID)
	if err != nil {
		t.Errorf("Unable to check if List exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ListExists to return true, but got false.")
	}
}

func testListsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	listFound, err := FindList(ctx, tx, o.ListID)
	if err != nil {
		t.Error(err)
	}

	if listFound == nil {
		t.Error("want a record, got nil")
	}
}

func testListsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Lists().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testListsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Lists().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testListsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	listOne := &List{}
	listTwo := &List{}
	if err = randomize.Struct(seed, listOne, listDBTypes, false, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}
	if err = randomize.Struct(seed, listTwo, listDBTypes, false, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = listOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = listTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Lists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testListsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	listOne := &List{}
	listTwo := &List{}
	if err = randomize.Struct(seed, listOne, listDBTypes, false, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}
	if err = randomize.Struct(seed, listTwo, listDBTypes, false, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = listOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = listTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testListsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testListsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(listColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Lists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testListToManyBooks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a List
	var b, c Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"book_list\" (\"list_id\", \"book_id\") values ($1, $2)", a.ListID, b.BookID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"book_list\" (\"list_id\", \"book_id\") values ($1, $2)", a.ListID, c.BookID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Books().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.BookID == b.BookID {
			bFound = true
		}
		if v.BookID == c.BookID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ListSlice{&a}
	if err = a.L.LoadBooks(ctx, tx, false, (*[]*List)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Books); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Books = nil
	if err = a.L.LoadBooks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Books); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testListToManyAddOpBooks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a List
	var b, c, d, e Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, listDBTypes, false, strmangle.SetComplement(listPrimaryKeyColumns, listColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Book{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Book{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBooks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Lists[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Lists[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Books[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Books[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Books().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testListToManySetOpBooks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a List
	var b, c, d, e Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, listDBTypes, false, strmangle.SetComplement(listPrimaryKeyColumns, listColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Book{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetBooks(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Books().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetBooks(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Books().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Lists) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Lists) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Lists[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Lists[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Books[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Books[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testListToManyRemoveOpBooks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a List
	var b, c, d, e Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, listDBTypes, false, strmangle.SetComplement(listPrimaryKeyColumns, listColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Book{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddBooks(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Books().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveBooks(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Books().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Lists) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Lists) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Lists[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Lists[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Books) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Books[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Books[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testListToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local List
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, listDBTypes, false, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ListSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*List)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testListToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a List
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, listDBTypes, false, strmangle.SetComplement(listPrimaryKeyColumns, listColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Lists[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testListsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testListsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ListSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testListsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Lists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	listDBTypes = map[string]string{`ListID`: `uuid`, `Name`: `text`, `UserID`: `uuid`}
	_           = bytes.MinRead
)

func testListsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(listPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(listAllColumns) == len(listPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, listDBTypes, true, listPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testListsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(listAllColumns) == len(listPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &List{}
	if err = randomize.Struct(seed, o, listDBTypes, true, listColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, listDBTypes, true, listPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(listAllColumns, listPrimaryKeyColumns) {
		fields = listAllColumns
	} else {
		fields = strmangle.SetComplement(
			listAllColumns,
			listPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ListSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testListsUpsert(t *testing.T) {
	t.Parallel()

	if len(listAllColumns) == len(listPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := List{}
	if err = randomize.Struct(seed, &o, listDBTypes, true); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert List: %s", err)
	}

	count, err := Lists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, listDBTypes, false, listPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize List struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert List: %s", err)
	}

	count, err = Lists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
