// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AccessTokens", testAccessTokens)
	t.Run("AppUserProfiles", testAppUserProfiles)
	t.Run("Books", testBooks)
	t.Run("Lists", testLists)
	t.Run("PasswordResetTokens", testPasswordResetTokens)
	t.Run("PushTokens", testPushTokens)
	t.Run("RefreshTokens", testRefreshTokens)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensDelete)
	t.Run("AppUserProfiles", testAppUserProfilesDelete)
	t.Run("Books", testBooksDelete)
	t.Run("Lists", testListsDelete)
	t.Run("PasswordResetTokens", testPasswordResetTokensDelete)
	t.Run("PushTokens", testPushTokensDelete)
	t.Run("RefreshTokens", testRefreshTokensDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensQueryDeleteAll)
	t.Run("AppUserProfiles", testAppUserProfilesQueryDeleteAll)
	t.Run("Books", testBooksQueryDeleteAll)
	t.Run("Lists", testListsQueryDeleteAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensQueryDeleteAll)
	t.Run("PushTokens", testPushTokensQueryDeleteAll)
	t.Run("RefreshTokens", testRefreshTokensQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensSliceDeleteAll)
	t.Run("AppUserProfiles", testAppUserProfilesSliceDeleteAll)
	t.Run("Books", testBooksSliceDeleteAll)
	t.Run("Lists", testListsSliceDeleteAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensSliceDeleteAll)
	t.Run("PushTokens", testPushTokensSliceDeleteAll)
	t.Run("RefreshTokens", testRefreshTokensSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensExists)
	t.Run("AppUserProfiles", testAppUserProfilesExists)
	t.Run("Books", testBooksExists)
	t.Run("Lists", testListsExists)
	t.Run("PasswordResetTokens", testPasswordResetTokensExists)
	t.Run("PushTokens", testPushTokensExists)
	t.Run("RefreshTokens", testRefreshTokensExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensFind)
	t.Run("AppUserProfiles", testAppUserProfilesFind)
	t.Run("Books", testBooksFind)
	t.Run("Lists", testListsFind)
	t.Run("PasswordResetTokens", testPasswordResetTokensFind)
	t.Run("PushTokens", testPushTokensFind)
	t.Run("RefreshTokens", testRefreshTokensFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensBind)
	t.Run("AppUserProfiles", testAppUserProfilesBind)
	t.Run("Books", testBooksBind)
	t.Run("Lists", testListsBind)
	t.Run("PasswordResetTokens", testPasswordResetTokensBind)
	t.Run("PushTokens", testPushTokensBind)
	t.Run("RefreshTokens", testRefreshTokensBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensOne)
	t.Run("AppUserProfiles", testAppUserProfilesOne)
	t.Run("Books", testBooksOne)
	t.Run("Lists", testListsOne)
	t.Run("PasswordResetTokens", testPasswordResetTokensOne)
	t.Run("PushTokens", testPushTokensOne)
	t.Run("RefreshTokens", testRefreshTokensOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensAll)
	t.Run("AppUserProfiles", testAppUserProfilesAll)
	t.Run("Books", testBooksAll)
	t.Run("Lists", testListsAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensAll)
	t.Run("PushTokens", testPushTokensAll)
	t.Run("RefreshTokens", testRefreshTokensAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensCount)
	t.Run("AppUserProfiles", testAppUserProfilesCount)
	t.Run("Books", testBooksCount)
	t.Run("Lists", testListsCount)
	t.Run("PasswordResetTokens", testPasswordResetTokensCount)
	t.Run("PushTokens", testPushTokensCount)
	t.Run("RefreshTokens", testRefreshTokensCount)
	t.Run("Users", testUsersCount)
}

func TestInsert(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensInsert)
	t.Run("AccessTokens", testAccessTokensInsertWhitelist)
	t.Run("AppUserProfiles", testAppUserProfilesInsert)
	t.Run("AppUserProfiles", testAppUserProfilesInsertWhitelist)
	t.Run("Books", testBooksInsert)
	t.Run("Books", testBooksInsertWhitelist)
	t.Run("Lists", testListsInsert)
	t.Run("Lists", testListsInsertWhitelist)
	t.Run("PasswordResetTokens", testPasswordResetTokensInsert)
	t.Run("PasswordResetTokens", testPasswordResetTokensInsertWhitelist)
	t.Run("PushTokens", testPushTokensInsert)
	t.Run("PushTokens", testPushTokensInsertWhitelist)
	t.Run("RefreshTokens", testRefreshTokensInsert)
	t.Run("RefreshTokens", testRefreshTokensInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensReload)
	t.Run("AppUserProfiles", testAppUserProfilesReload)
	t.Run("Books", testBooksReload)
	t.Run("Lists", testListsReload)
	t.Run("PasswordResetTokens", testPasswordResetTokensReload)
	t.Run("PushTokens", testPushTokensReload)
	t.Run("RefreshTokens", testRefreshTokensReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensReloadAll)
	t.Run("AppUserProfiles", testAppUserProfilesReloadAll)
	t.Run("Books", testBooksReloadAll)
	t.Run("Lists", testListsReloadAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensReloadAll)
	t.Run("PushTokens", testPushTokensReloadAll)
	t.Run("RefreshTokens", testRefreshTokensReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensSelect)
	t.Run("AppUserProfiles", testAppUserProfilesSelect)
	t.Run("Books", testBooksSelect)
	t.Run("Lists", testListsSelect)
	t.Run("PasswordResetTokens", testPasswordResetTokensSelect)
	t.Run("PushTokens", testPushTokensSelect)
	t.Run("RefreshTokens", testRefreshTokensSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensUpdate)
	t.Run("AppUserProfiles", testAppUserProfilesUpdate)
	t.Run("Books", testBooksUpdate)
	t.Run("Lists", testListsUpdate)
	t.Run("PasswordResetTokens", testPasswordResetTokensUpdate)
	t.Run("PushTokens", testPushTokensUpdate)
	t.Run("RefreshTokens", testRefreshTokensUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensSliceUpdateAll)
	t.Run("AppUserProfiles", testAppUserProfilesSliceUpdateAll)
	t.Run("Books", testBooksSliceUpdateAll)
	t.Run("Lists", testListsSliceUpdateAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensSliceUpdateAll)
	t.Run("PushTokens", testPushTokensSliceUpdateAll)
	t.Run("RefreshTokens", testRefreshTokensSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
